--- /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisTop/21.2.96/InstallArea/x86_64-centos7-gcc8-opt/src/PhysicsAnalysis/TopPhys/xAOD/TopCPTools/Root/TopMuonCPTools.cxx	2019-10-24 03:20:52.000000000 +0200
+++ TopMuonCPTools.cxx	2019-10-29 01:25:17.000000001 +0100
@@ -209,12 +209,12 @@ namespace top {
 
     // WARNING - The PromptLeptonIsolation scale factors are only derived with respect to the loose PID
     //         - Hence we need to fail if this has occured
-    if ((m_config->muonQuality() != "Loose" && m_config->muonIsolationSF() == "PromptLepton")
-        || (m_config->muonQualityLoose() != "Loose" && m_config->muonIsolationSFLoose() == "PromptLepton")) {
-      ATH_MSG_ERROR(
-        "Cannot use PromptLeptonIsolation on muons without using Loose quality - Scale factors are not available");
-      return StatusCode::FAILURE;
-    }
+    // if ((m_config->muonQuality() != "Loose" && m_config->muonIsolationSF() == "PromptLepton")
+    //     || (m_config->muonQualityLoose() != "Loose" && m_config->muonIsolationSFLoose() == "PromptLepton")) {
+    //   ATH_MSG_ERROR(
+    //     "Cannot use PromptLeptonIsolation on muons without using Loose quality - Scale factors are not available");
+    //   return StatusCode::FAILURE;
+    // }
 
     return StatusCode::SUCCESS;
   }
@@ -277,8 +277,20 @@ namespace top {
       tool = asg::ToolStore::get<CP::MuonEfficiencyScaleFactors>(name);
     } else {
       tool = new CP::MuonEfficiencyScaleFactors(name);
+      if(WP == "PromptLeptonIso" || WP == "PromptLepton"){
+	std::cout << "ALBERT WP: " << WP << std::endl;
       top::check(asg::setProperty(tool, "WorkingPoint", WP),
                  "Failed to set WP for " + name + " tool");
+      char* const rc = getenv("WorkDir_DIR");
+      top::check(asg::setProperty(tool, "CustomInputFolder",
+				  std::string(rc)+"/data/ttHMultilepton/data/R21_PLV_SFs"),
+		 "Failed to Set Custom folder for " + name + " tool"); 
+      top::check(asg::setProperty(tool, "CustomFileCombined", "Iso_mptLeptonVetoIso_Z.root"),
+		 "Failed to set Custom file for " + name + " tool"); 
+      } else { 
+	top::check(asg::setProperty(tool, "WorkingPoint", WP),
+		   "Failed to set WP for " + name + " tool");
+      }
       top::check(tool->initialize(),
                  "Failed to set initialize " + name);
     }

--- /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisTop/21.2.75/InstallArea/x86_64-slc6-gcc62-opt/src/PhysicsAnalysis/TopPhys/xAOD/TopCPTools/Root/TopMuonCPTools.cxx	2019-05-16 03:11:24.000000000 +0200
+++ ./../../../TopCPTools/Root/TopMuonCPTools.cxx	2019-06-28 10:11:14.000000001 +0200
@@ -208,11 +208,11 @@ StatusCode MuonCPTools::setupScaleFactor
 
   // WARNING - The PromptLeptonIsolation scale factors are only derived with respect to the loose PID
   //         - Hence we need to fail if this has occured
-  if( (m_config->muonQuality() != "Loose" && m_config->muonIsolationSF() == "PromptLepton")
-      || (m_config->muonQualityLoose() !="Loose" && m_config->muonIsolationSFLoose() == "PromptLepton") ){
-    ATH_MSG_ERROR("Cannot use PromptLeptonIsolation on muons without using Loose quality - Scale factors are not available");
-    return StatusCode::FAILURE;
-  }
+  // if( (m_config->muonQuality() != "Loose" && m_config->muonIsolationSF() == "PromptLepton")
+  //     || (m_config->muonQualityLoose() !="Loose" && m_config->muonIsolationSFLoose() == "PromptLepton") ){
+  //   ATH_MSG_ERROR("Cannot use PromptLeptonIsolation on muons without using Loose quality - Scale factors are not available");
+  //   return StatusCode::FAILURE;
+  // }
 
   return StatusCode::SUCCESS;
 }
@@ -288,9 +288,25 @@ MuonCPTools::setupMuonSFTool(const std::
     tool = asg::ToolStore::get<CP::MuonEfficiencyScaleFactors>(name);
   } else {
     tool = new CP::MuonEfficiencyScaleFactors(name);
-    top::check(asg::setProperty(tool, "WorkingPoint", WP),
+    
+	if(WP == "PromptLeptonIso" || WP == "PromptLepton"){
+        std::cout << "ALBERT WP: " << WP << std::endl;
+
+        top::check(asg::setProperty(tool, "WorkingPoint",WP),
                 "Failed to set WP for " + name + " tool");
-    top::check(tool->initialize(),
+        char* const rc = getenv("WorkDir_DIR");
+
+        top::check(asg::setProperty(tool, "CustomInputFolder",
+        	std::string(rc)+"/data/ttHMultilepton/data/R21_PLV_SFs"),
+        	"Failed to Set Custom folder for " + name + " tool");
+
+        top::check(asg::setProperty(tool, "CustomFileCombined", "Iso_mptLeptonVetoIso_Z.root"),
+        	"Failed to set Custom file for " + name + " tool");
+    } else {
+    	top::check(asg::setProperty(tool, "WorkingPoint", WP),
+    		"Failed to set WP for " + name + " tool");
+    }
+	top::check(tool->initialize(),
                 "Failed to set initialize " + name);
   }
   return tool;

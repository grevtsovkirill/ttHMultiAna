--- /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisTop/21.2.52/InstallArea/x86_64-slc6-gcc62-opt/src/PhysicsAnalysis/TopPhys/xAOD/TopCPTools/Root/TopEgammaCPTools.cxx	2018-06-13 03:03:41.000000000 +0200
+++ Top.cxx	2018-06-24 20:49:06.000000001 +0200
@@ -225,12 +225,12 @@
   m_electronEffSFIDFile           = electronSFMapFilePath("ID");
   m_electronEffSFTriggerFile      = electronSFMapFilePath("trigger");
   m_electronEffTriggerFile        = electronSFMapFilePath("trigger");
-  m_electronEffSFIsoFile          = electronSFMapFilePath("isolation");
+  m_electronEffSFIsoFile          = electronSFMapFilePath("isolation", electronIsolation);
   // - Loose
   m_electronEffSFIDLooseFile      = electronSFMapFilePath("ID");
   m_electronEffSFTriggerLooseFile = electronSFMapFilePath("trigger");
   m_electronEffTriggerLooseFile   = electronSFMapFilePath("trigger");
-  m_electronEffSFIsoLooseFile     = electronSFMapFilePath("isolation");
+  m_electronEffSFIsoLooseFile          = electronSFMapFilePath("isolation", electronIsolationLoose);
 
   // Perform check on the isolation WP and identify if there are cases where the SF is not available
   if( (electronIsolation != "None" && m_electronEffSFIsoFile == "") || (electronIsolationLoose != "None" && m_electronEffSFIsoLooseFile == "") ){
@@ -268,16 +268,31 @@
   // ID SFs
   m_electronEffSFID           = setupElectronSFToolWithMap(elSFPrefix + "ID", m_electronEffSFIDFile, "", electronID, "", "", dataType);
   m_electronEffSFIDLoose      = setupElectronSFToolWithMap(elSFPrefix + "IDLoose", m_electronEffSFIDLooseFile, "", electronIDLoose, "", "", dataType);
+  bool changeBack = false, changeBackLoose = false;
+  if(electronIsolation == "PromptLepton"){electronIsolation = "None"; changeBack = true;}
+  if(electronIsolationLoose == "PromptLepton"){electronIsolationLoose = "None"; changeBackLoose = true;}
   // Trigger SFs
   m_electronEffSFTrigger      = setupElectronSFToolWithMap(elSFPrefix + "TriggerSF", m_electronEffSFTriggerFile, "", electronID, electronIsolation, trigger_string, dataType);
   m_electronEffSFTriggerLoose = setupElectronSFToolWithMap(elSFPrefix + "TriggerSFLoose", m_electronEffSFTriggerLooseFile, "", electronIDLoose, electronIsolationLoose, trigger_string, dataType);
   // Trigger Efficiencies
   m_electronEffTrigger        = setupElectronSFToolWithMap(elSFPrefix + "Trigger", m_electronEffTriggerFile, "", electronID, electronIsolation, "Eff_"+trigger_string, dataType);
   m_electronEffTriggerLoose   = setupElectronSFToolWithMap(elSFPrefix + "TriggerLoose", m_electronEffTriggerLooseFile, "", electronIDLoose, electronIsolationLoose, "Eff_"+trigger_string, dataType);
+  if(changeBack){electronIsolation = "PromptLepton";}
+  if(changeBackLoose){electronIsolationLoose = "PromptLepton";}
+  if(electronIsolation == "PromptLepton"){
+    std::vector< std::string > filenames;
+    filenames.push_back(m_electronEffSFIsoFile);
+    m_electronEffSFIso = setupElectronSFTool(elSFPrefix + "Iso", filenames, dataType);
+  } else { m_electronEffSFIso          = setupElectronSFToolWithMap(elSFPrefix + "Iso", m_electronEffSFIsoFile,  "", electronID, electronIsolation, "", dataType);}
+  if(electronIsolationLoose == "PromptLepton"){
+    std::vector< std::string > filenames_loose;
+    filenames_loose.push_back(m_electronEffSFIsoLooseFile);
+    m_electronEffSFIsoLoose = setupElectronSFTool(elSFPrefix + "IsoLoose", filenames_loose, dataType);
+  } else { m_electronEffSFIsoLoose          = setupElectronSFToolWithMap(elSFPrefix + "IsoLoose", m_electronEffSFIsoLooseFile,  "", electronID, electronIsolation, "", dataType);}
   // Isolation SFs
-  m_electronEffSFIso          = setupElectronSFToolWithMap(elSFPrefix + "Iso", m_electronEffSFIsoFile,  "", electronID, electronIsolation, "", dataType);
+/*  m_electronEffSFIso          = setupElectronSFToolWithMap(elSFPrefix + "Iso", m_electronEffSFIsoFile,  "", electronID, electronIsolation, "", dataType);
   m_electronEffSFIsoLoose     = setupElectronSFToolWithMap(elSFPrefix + "IsoLoose", m_electronEffSFIsoLooseFile, "", electronID, electronIsolationLoose, "", dataType);
-
+*/
   // Charge ID cannot use maps at the moment so we defualt to the old method
   // for the moment only for MediumLH and FixedCutTight isolation
   // either at Tight or Loose level
@@ -388,7 +403,7 @@
   return PathResolverFindCalibFile(el_calib_path + file_path);
 }
 
-std::string EgammaCPTools::electronSFMapFilePath(const std::string& type) {
+std::string EgammaCPTools::electronSFMapFilePath(const std::string& type, const std::string& isolation) {
     // Store here the paths to maps which may be updated with new recommendations
     // Currently can use maps for reco, id, iso, trigger but not ChargeID
     const std::string el_calib_path = "ElectronEfficiencyCorrection/2015_2017/rel21.2/Moriond_February2018_v2/";
@@ -402,6 +417,10 @@
     }
     else if(type == "isolation"){
       file_path = "map5.txt";
+      if (isolation == "PromptLepton" || isolation == "PromptLeptonCFT") { // should be only true in case of using ttH-ML private root file
+        char* const rc = getenv("WorkDir_DIR");
+        return PathResolverFindCalibFile( std::string(rc)+"/data/ttHMultilepton/data/R21_PLV_SFs/efficiencySF.Isolation.TightLLH_d0z0_v13_PLVeto_CFTtight_ambiguity0_isolFixedCutLoose.root");
+      }
     }
     else if(type == "trigger"){
       file_path = "map5.txt";

--- MuonEfficiencyCorrections/Root/MuonTriggerScaleFactors.cxx	2018-11-15 19:40:45.000000001 +0100
+++ Nazlim_MuonEfficiencyCorrections/Root/MuonTriggerScaleFactors.cxx	2018-11-15 19:40:38.000000001 +0100
@@ -36,7 +36,7 @@
     //static const double commonSystMTSG = 0.01;
     static const double muon_barrel_endcap_boundary = 1.05;
     unsigned int MuonTriggerScaleFactors::getFallBackRunNumber() const{
-        return 340453;
+      return 340453;
     }
     MuonTriggerScaleFactors::MuonTriggerScaleFactors(const std::string& name) :
                 asg::AsgTool(name),
@@ -48,13 +48,14 @@
                 m_efficiencyMap(),
                 m_efficiencyMapReplicaArray(),
                 m_muonquality("Medium"),
-                m_calibration_version("180312_TriggerUpdate"),
+                m_calibration_version("180905_TriggerUpdate"),
                 m_custom_dir(),
                 m_binning("fine"),
 		m_eventInfoContName("EventInfo"),
                 m_allowZeroSF(false),
 		m_experimental(false),
 		m_useRel207(false),
+		m_useMC16c(false),
                 m_replicaTriggerList(),
                 m_replicaSet(),
                 m_nReplicas(100),
@@ -67,6 +68,7 @@
         declareProperty("CustomInputFolder", m_custom_dir);
         declareProperty("Binning", m_binning); // fine or coarse
         declareProperty("UseExperimental", m_experimental); // enable experimental features like single muon SF
+        declareProperty("MC16c", m_useMC16c); // enable if MC16c scale factors should be used for 2017
         declareProperty("useRel207", m_useRel207); // fine or coarse	
         //Properties needed for TOY setup for a given trigger: No replicas if m_replicaTriggerList is empty
         declareProperty("ReplicaTriggerList", m_replicaTriggerList, "List of triggers on which we want to generate stat. uncertainty toy replicas.");
@@ -83,9 +85,14 @@
 
         std::string fileName = m_fileName;
         if (fileName.empty() && !m_useRel207) {
-            if (year == 2015) fileName = "muontrigger_sf_2015_mc16a_v01.root";
-            else if (year == 2016) fileName = "muontrigger_sf_2016_mc16a_v01.root";
-	    else if (year == 2017) fileName = "muontrigger_sf_2017_mc16c_v02.root";
+            if (year == 2015) fileName = "muontrigger_sf_2015_mc16a_v02.root";
+            else if (year == 2016) fileName = "muontrigger_sf_2016_mc16a_v03.root";
+	    else if (year == 2017){
+	      if(m_useMC16c)
+		fileName = "muontrigger_sf_2017_mc16c_v02.root";
+	      else
+		fileName = "muontrigger_sf_2017_mc16d_v01.root";
+	    }
             else {
                 ATH_MSG_WARNING("There is no SF file for year " << year << " yet");
                 return StatusCode::SUCCESS;
@@ -126,8 +133,6 @@
 
         static const std::vector<std::string> type { "data", "mc" };
         static const std::vector<std::string> region { "barrel", "endcap" };
-        //Why loading coarse binning if you never use it?!
-//        static const std::vector<std::string> bins { "coarse", "fine" };
         static const std::vector<std::string> systematic { "nominal", "stat_up", "stat_down", "syst_up", "syst_down" };
 	if(m_muonquality.compare("LowPt") == 0)
 	  m_muonquality = "Medium";
@@ -150,7 +155,10 @@
                 if (not triggerKey->IsFolder()) continue;
                 TDirectory* triggerDirectory = periodDirectory->GetDirectory(triggerKey->GetName());
                 std::string triggerName = std::string(triggerKey->GetName());
-
+		if(!std::set<std::string>{"HLT_mu26_ivarmedium", "HLT_mu50", "HLT_mu26_ivarmedium_OR_HLT_mu50"}.count(triggerName) && m_binning == "coarse"){
+		  ATH_MSG_DEBUG("Coarse binning not supported for di-muon trigger legs at the moment");
+		  continue;
+		}
                 for (const auto& iregion : region) {
                     bool isBarrel = iregion.find("barrel") != std::string::npos;
                     for (const auto& itype : type) {
@@ -162,6 +170,7 @@
                             std::string path = "eff_etaphi_" + m_binning + "_" + iregion + "_" + itype + "_" + isys;
                             TH2* hist = dynamic_cast<TH2*>(triggerDirectory->Get(path.c_str()));
                             if (not hist) {
+			      
                                 ATH_MSG_FATAL("MuonTriggerScaleFactors::initialize " << path << " not found under trigger " << triggerName << " and period " << periodName);
                                 continue;
                             }
@@ -268,11 +277,7 @@
             ATH_MSG_WARNING("What you are trying to do is not correct. For di-muon triggers you should get the efficiency with getTriggerEfficiency and compute the SF by yourself.");
         }
 	else if (trigger.find("HLT_2mu10") != std::string::npos || trigger.find("HLT_2mu14") != std::string::npos) {
-	  if(!m_useRel207){
-	    ATH_MSG_ERROR("You try to retrieve scale factors for di-muon triggers which have not been measured in release 21, yet. If you want to use the SFs measured in release 20.7, please set m_useRel207. This will be updated soon, for now giving up.");
-	    return CorrectionCode::Error;
-	  }
-            CorrectionCode cc = GetTriggerSF_dimu(triggersf, configuration, mucont, trigger);
+	  CorrectionCode cc = GetTriggerSF_dimu(triggersf, configuration, mucont, trigger);
 	  return cc;
         } else {
             CorrectionCode cc = GetTriggerSF(triggersf, configuration, mucont, trigger);
@@ -435,7 +440,7 @@
             std::map<EffiHistoIdent, std::vector<TH1_Ptr> >::const_iterator cit = m_efficiencyMapReplicaArray.find(Ident);
             if (cit == m_efficiencyMapReplicaArray.end()) {
                 if (m_allowZeroSF) {
-                    eff = 0.;
+                    eff = 1.;
                     return CorrectionCode::Ok;
                 }
 
@@ -455,7 +460,7 @@
             TH1_Ptr cit = getEfficiencyHistogram(trigger, configuration.isData, systematic, isBarrel);
             if (cit.get() == nullptr) {
                 if (m_allowZeroSF) {
-                    eff = 0.;
+                    eff = 1.;
                     return CorrectionCode::Ok;
                 } else {
                     ATH_MSG_ERROR("Could not find what you are looking for in the efficiency map. The trigger you are looking for, year and mc are not consistent, or the trigger is unavailable in this data period. Please check how you set up the tool.");
@@ -783,6 +788,7 @@
         //Return some  default  value
         return getDataPeriod(getFallBackRunNumber() , getYear(getFallBackRunNumber() ));
     }
+  
     unsigned int MuonTriggerScaleFactors::getRunNumber() const {
         static const SG::AuxElement::ConstAccessor<unsigned int> acc_rnd("RandomRunNumber");
         const xAOD::EventInfo* info = nullptr;

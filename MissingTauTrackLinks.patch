Index: Root/TauScaleFactorCalculator.cxx
===================================================================
--- Root/TauScaleFactorCalculator.cxx	(revision 799115)
+++ Root/TauScaleFactorCalculator.cxx	(working copy)
@@ -96,11 +96,21 @@
 
       double nominalSF(0.0), nominalSFLoose(0.0);
 
-      top::check(m_tauEffCorrTool->getEfficiencyScaleFactor(*tauPtr, nominalSF),
-                 "Failed to get nominal tau SF");
-      top::check(m_tauEffCorrToolLoose->getEfficiencyScaleFactor(*tauPtr,
-                                                                 nominalSFLoose),
-                 "Failed to get nominal (loose) tau SF");
+      try {
+	top::check(m_tauEffCorrTool->getEfficiencyScaleFactor(*tauPtr, nominalSF),
+		   "Failed to get nominal tau SF");
+      } catch(const std::runtime_error& e) {
+	nominalSF = 1;
+	std::cout<<"couldnt get tau SF setting to 1";
+      }
+      try {
+	top::check(m_tauEffCorrToolLoose->getEfficiencyScaleFactor(*tauPtr,
+								   nominalSFLoose),
+		   "Failed to get nominal (loose) tau SF");
+      } catch(const std::runtime_error& e) {
+	nominalSFLoose = 1;
+	std::cout<<"couldnt get tau SF setting to 1";
+      }
 
       ///-- Decorate the tau with the tight/loose SFs --///
       tauPtr->auxdecor<float>("tauSF") = nominalSF;
@@ -118,11 +128,21 @@
           top::check(m_tauEffCorrToolLoose->applySystematicVariation(i.second),
                      "Failed to set (loose) tau efficiency correction"
                      " tool to nominal value");
-          top::check(m_tauEffCorrTool->getEfficiencyScaleFactor(*tauPtr, SF),
-                     "Failed to get nominal tau SF");
-          top::check(m_tauEffCorrToolLoose->getEfficiencyScaleFactor(*tauPtr,
-                                                                     SF_loose),
-                     "Failed to get nominal (loose) tau SF");
+	  try {
+	    top::check(m_tauEffCorrTool->getEfficiencyScaleFactor(*tauPtr, SF),
+		       "Failed to get nominal tau SF");
+	  } catch(const std::runtime_error& e) {
+	    SF = 1;
+	    std::cout<<"couldnt get tau SF setting to 1";
+	  }
+	  try {
+	    top::check(m_tauEffCorrToolLoose->getEfficiencyScaleFactor(*tauPtr,
+								       SF_loose),
+		       "Failed to get nominal (loose) tau SF");
+	  } catch(const std::runtime_error& e) {
+	    SF_loose = 1;
+	    std::cout<<"couldnt get tau SF setting to 1";
+	  }
           tauPtr->auxdecor<float>(decoration_name) = SF;
           tauPtr->auxdecor<float>(decoration_name_loose) = SF_loose;
         }
